openapi: 3.0.1
info:
  title: Analysis public REST API
  version: 0.0.2
paths:
  /analyses:
    summary: 'Manage analyses'
    post:
      summary: 'Create an analysis'
      description: ""
      operationId: createAnalysisV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalysisDTO'
      responses:
        '201':
          description: 'Analysis created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisDTO'
        '400':
          description: 'Invalid input'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      tags:
        - 'Analysis'
    get:
      summary: 'Get a list of analysis of the logged user'
      description: ""
      operationId: listAnalysesV1
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/pageSizeParam'
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedAnalyses'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        default:
          description: 'Default error sample response'
      tags:
        - 'Analysis'
  /analyses/{analysisId}:
    summary: 'Manage an analysis'
    parameters:
      -
        name: analysisId
        in: path
        required: true
        description: 'The id of the analysis to retrieve'
        schema:
          type: string
    get:
      summary: 'Get an analysis'
      description: ""
      operationId: getAnalysisV1
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisDTO'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnaccessibleError'
        '404':
          $ref: '#/components/responses/AnalysisNotFoundError'
      tags:
        - 'Analysis'
    patch:
      summary: 'Update an analysis (Only status and visibility are updatable)'
      description: ""
      operationId: patchAnalysisV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalysisUpdatableDTO'
      responses:
        '204':
          description: "Analysis updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisDTO'
        '400':
          $ref: '#/components/responses/InvalidStatusError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnaccessibleError'
        '404':
          $ref: '#/components/responses/AnalysisNotFoundError'
      tags:
        - 'Analysis'
    delete:
      summary: "Set the status of an analysis to cancelled"
      operationId: deleteAnalysisV1
      responses:
        '200':
          description: "Status change scheduled"
        '400':
          $ref: '#/components/responses/InvalidStatusError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnaccessibleError'
        '404':
          $ref: '#/components/responses/AnalysisNotFoundError'
      tags:
        - 'Analysis'
  /analyses/{analysisId}/history:
    summary: 'Get the status history of an analysis'
    parameters:
      -
        name: analysisId
        in: path
        required: true
        description: 'The id of the analysis to retrieve'
        schema:
          type: string
    get:
      summary: 'Get the status history of an analysis'
      description: ""
      operationId: getAnalysisHistoryV1
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnalysisStatusHistoryDTO'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnaccessibleError'
        '404':
          $ref: '#/components/responses/AnalysisNotFoundError'
      tags:
        - 'Analysis'

  /analysis-results/{analysisId}:
    summary: 'Get the result of an analysis'
    parameters:
      -
        name: analysisId
        in: path
        required: true
        description: 'The id of the analysis'
        schema:
          type: string
    get:
      summary: 'Get the results of an analysis'
      description: ""
      operationId: getAnalysisResultsV1
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/pageSizeParam'
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedAnalysisResults'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnaccessibleError'
        '404':
          $ref: '#/components/responses/AnalysisNotFoundError'
      tags:
        - 'Analysis Results'
  /analysis-results/{analysisId}/search:
    summary: 'Search the result of an analysis'
    parameters:
      - name: analysisId
        in: path
        required: true
        description: 'The id of the analysis'
        schema:
          type: string
    get:
      summary: 'Search the results of an analysis'
      description: ""
      operationId: searchAnalysisResultsV1
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/pageSizeParam'
        - name: filter
          in: query
          required: true
          description: 'The search query'
          schema:
            type: string
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedAnalysisResults'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnaccessibleError'
        '404':
          $ref: '#/components/responses/AnalysisNotFoundError'
      tags:
        - 'Analysis Results'
  /analysis-results/{analysisId}/count:
    summary: 'Get the total number of results for the chosen analysis'
    parameters:
      - name: analysisId
        in: path
        required: true
        description: 'The id of the analysis'
        schema:
          type: string
    get:
      summary: 'Get the total number of results for the chosen analysis'
      description: ""
      operationId: countAnalysisResultsV1
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisResultsCount'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnaccessibleError'
        '404':
          $ref: '#/components/responses/AnalysisNotFoundError'
      tags:
        - 'Analysis Results'
components:
  schemas:
    PagedResponse:
      type: object
      properties:
        totalCount:
          type: integer
          format: int64
        pageSize:
          type: integer
        page:
          type: integer
        count:
          type: integer
    AnalysisStatusEnum:
      type: string
      default: ready
      enum:
        - ready
        - started
        - stopped
        - completed
        - cancelled
        - failed
    AnalysisVisibilityEnum:
      type: string
      default: public
      enum:
        - private
        - public
    AnalysisTypeEnum:
      type: string
      enum:
        - twitter-neel
    AnalysisInputTypeEnum:
      type: string
      enum:
        - query
        - dataset
    AnalysisInputDTO:
      type: object
    QueryAnalysisInputDTO:
      allOf:
        - $ref: '#/components/schemas/AnalysisInputDTO'
        - type: object
          required:
            - tokens
            - operator
          properties:
            tokens:
              type: array
              items:
                type: string
            joinOperator:
              type: string
              enum:
                - and
                - or
    DatasetAnalysisInputDTO:
      allOf:
        - $ref: '#/components/schemas/AnalysisInputDTO'
        - type: object
          required:
            - documentId
          properties:
            documentId:
              type: string
    AnalysisDTO:
      type: object
      required:
        - type
        - inputType
        - input
      properties:
        id:
          type: string
          readOnly: true
        type:
          $ref: '#/components/schemas/AnalysisTypeEnum'
        inputType:
          $ref: '#/components/schemas/AnalysisInputTypeEnum'
        owner:
          type: string
          readOnly: true
        status:
          $ref: '#/components/schemas/AnalysisStatusEnum'
        visibility:
          $ref: '#/components/schemas/AnalysisVisibilityEnum'
        input:
          type: object
          oneOf:
            - $ref: '#/components/schemas/QueryAnalysisInputDTO'
            - $ref: '#/components/schemas/DatasetAnalysisInputDTO'
          discriminator:
            propertyName: inputType
            mapping:
              query: '#/components/schemas/QueryAnalysisInputDTO'
              dataset: '#/components/schemas/DatasetAnalysisInputDTO'
        createDate:
          type: string
          format: date-time
          readOnly: true
        updateDate:
          type: string
          format: date-time
          readOnly: true
    AnalysisUpdatableDTO:
      properties:
        status:
          $ref: '#/components/schemas/AnalysisStatusEnum'
        visibility:
          $ref: '#/components/schemas/AnalysisVisibilityEnum'
    AnalysisStatusHistoryDTO:
      type: object
      properties:
        oldStatus:
          $ref: '#/components/schemas/AnalysisStatusEnum'
        newStatus:
          $ref: '#/components/schemas/AnalysisStatusEnum'
        message:
          type: string
        errorCode:
          type: integer
        user:
          type: string
        date:
          type: string
          format: date-time
    PagedAnalyses:
      allOf:
        - $ref: '#/components/schemas/PagedResponse'
        - type: object
          properties:
            objects:
              type: array
              items:
                $ref: '#/components/schemas/AnalysisDTO'
    PagedAnalysisResults:
      allOf:
        - $ref: '#/components/schemas/PagedResponse'
        - type: object
          properties:
            analysisId:
              type: string
            objects:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/TwitterNeelAnalysisResultDTO'
    AnalysisResultsCount:
      type: object
      properties:
        analysisId:
          type: string
        count:
          type: number
          format: int64
    NeelProcessedTweetDTO:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/TwitterStatusDTO'
        entities:
          type: array
          items:
            $ref: '#/components/schemas/LinkedEntityDTO'
    AnalysisResultDTO:
      type: object
      properties:
        id:
          type: string
        analysisId:
          type: string
        processDate:
          type: string
          format: date-time
        saveDate:
          type: string
          format: date-time
    TwitterNeelAnalysisResultDTO:
      allOf:
        - $ref: '#/components/schemas/AnalysisResultDTO'
        - type: object
          required:
            - status
            - entities
          properties:
            payload:
              $ref: '#/components/schemas/NeelProcessedTweetDTO'
    TwitterStatusDTO:
      type: object
      required:
        - id
        - text
      properties:
        id:
          type: string
        text:
          type: string
        user:
          $ref: '#/components/schemas/TwitterUserDTO'
        coordinates:
          $ref: '#/components/schemas/CoordinatesDTO'
    TwitterUserDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        screenName:
          type: string
        location:
          type: string
        profileImageUrl:
          type: string
        coordinates:
          $ref: '#/components/schemas/CoordinatesDTO'
    CoordinatesDTO:
      type: object
      properties:
        latitude:
          type: integer
        longitude:
          type: integer
    LinkedEntityDTO:
      type: object
      properties:
        link:
          type: string
        confidence:
          type: number
        category:
          type: string
        isNil:
          type: boolean
        nilCluster:
          type: string
        position:
          $ref: '#/components/schemas/TextRangeDTO'
        resource:
          $ref: '#/components/schemas/ResourceDTO'
    TextRangeDTO:
      type: object
      properties:
        start:
          type: integer
        end:
          type: integer
    ResourceDTO:
      type: object
      properties:
        name:
          type: string
        shortDesc:
          type: string
        thumb:
          type: string
        thumbLarge:
          type: string
        url:
          type: string
        coordinates:
          $ref: '#/components/schemas/CoordinatesDTO'
  parameters:
    pageSizeParam:
      name: pageSize
      in: query
      description: 'How many items to return per page (max 100)'
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 100
    pageParam:
      name: page
      in: query
      description: 'The page from which start to fetch items (zero-based)'
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
  responses:
    UnauthorizedError:
      description: JWT token is missing or invalid
    UnaccessibleError:
      description: Cannot access to this analysis
    AnalysisNotFoundError:
      description: Analysis not found
    InvalidStatusError:
      description: Analysis status change cannot be applied

servers:
  -
    url: /api/public
    variables: {}
    description: 'Analysis microservice'
